<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/controllers/ping_controller.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/controllers/ping_controller.go" />
              <option name="originalContent" value="package controllers&#10;&#10;import (&#10;&#9;&quot;github.com/gofiber/fiber/v2&quot;&#10;)&#10;&#10;func Ping(c *fiber.Ctx) error {&#10;&#9;return c.JSON(fiber.Map{&quot;message&quot;: &quot;pong&quot;})&#10;}&#10;" />
              <option name="updatedContent" value="package controllers&#10;&#10;import (&#10;&#9;&quot;github.com/gofiber/fiber/v2&quot;&#10;)&#10;&#10;// Ping godoc&#10;// @Summary Health check&#10;// @Description Returns pong if the server is running&#10;// @Tags health&#10;// @Produce json&#10;// @Success 200 {object} map[string]string&#10;// @Router /ping [get]&#10;func Ping(c *fiber.Ctx) error {&#10;&#9;return c.JSON(fiber.Map{&quot;message&quot;: &quot;pong&quot;})&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/controllers/player_controller.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/controllers/player_controller.go" />
              <option name="originalContent" value="package controllers&#10;&#10;import (&#10;&#9;&quot;contoso/models&quot;&#10;&#9;&quot;contoso/repository&quot;&#10;&#9;&quot;github.com/gofiber/fiber/v2&quot;&#10;)&#10;&#10;func CreatePlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;var player models.Player&#10;&#9;&#9;if err := c.BodyParser(&amp;player); err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;created, err := repo.CreatePlayer(&amp;player)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.Status(fiber.StatusCreated).JSON(created)&#10;&#9;}&#10;}&#10;&#10;func GetPlayers(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;players, err := repo.GetPlayers()&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.JSON(players)&#10;&#9;}&#10;}&#10;&#10;func GetPlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;id := c.Params(&quot;id&quot;)&#10;&#9;&#9;player, err := repo.GetPlayer(id)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusNotFound).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.JSON(player)&#10;&#9;}&#10;}&#10;&#10;func UpdatePlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;id := c.Params(&quot;id&quot;)&#10;&#9;&#9;var input models.Player&#10;&#9;&#9;if err := c.BodyParser(&amp;input); err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;updated, err := repo.UpdatePlayer(id, &amp;input)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.JSON(updated)&#10;&#9;}&#10;}&#10;&#10;func DeletePlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;id := c.Params(&quot;id&quot;)&#10;&#9;&#9;err := repo.DeletePlayer(id)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.SendStatus(fiber.StatusNoContent)&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package controllers&#10;&#10;import (&#10;&#9;&quot;contoso/models&quot;&#10;&#9;&quot;contoso/repository&quot;&#10;&#9;&quot;github.com/gofiber/fiber/v2&quot;&#10;)&#10;&#10;// CreatePlayer godoc&#10;// @Summary Create a new player&#10;// @Description Create a new player in the system&#10;// @Tags players&#10;// @Accept json&#10;// @Produce json&#10;// @Param player body models.Player true &quot;Player data&quot;&#10;// @Success 201 {object} models.Player&#10;// @Failure 400 {object} map[string]string&#10;// @Failure 500 {object} map[string]string&#10;// @Router /players [post]&#10;func CreatePlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;var player models.Player&#10;&#9;&#9;if err := c.BodyParser(&amp;player); err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;created, err := repo.CreatePlayer(&amp;player)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.Status(fiber.StatusCreated).JSON(created)&#10;&#9;}&#10;}&#10;&#10;// GetPlayers godoc&#10;// @Summary Get all players&#10;// @Description Get a list of all players&#10;// @Tags players&#10;// @Produce json&#10;// @Success 200 {array} models.Player&#10;// @Failure 500 {object} map[string]string&#10;// @Router /players [get]&#10;func GetPlayers(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;players, err := repo.GetPlayers()&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.JSON(players)&#10;&#9;}&#10;}&#10;&#10;// GetPlayer godoc&#10;// @Summary Get a player by ID&#10;// @Description Get details of a player by ID&#10;// @Tags players&#10;// @Produce json&#10;// @Param id path string true &quot;Player ID&quot;&#10;// @Success 200 {object} models.Player&#10;// @Failure 404 {object} map[string]string&#10;// @Router /players/{id} [get]&#10;func GetPlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;id := c.Params(&quot;id&quot;)&#10;&#9;&#9;player, err := repo.GetPlayer(id)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusNotFound).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.JSON(player)&#10;&#9;}&#10;}&#10;&#10;// UpdatePlayer godoc&#10;// @Summary Update a player&#10;// @Description Update a player's information&#10;// @Tags players&#10;// @Accept json&#10;// @Produce json&#10;// @Param id path string true &quot;Player ID&quot;&#10;// @Param player body models.Player true &quot;Player data&quot;&#10;// @Success 200 {object} models.Player&#10;// @Failure 400 {object} map[string]string&#10;// @Failure 500 {object} map[string]string&#10;// @Router /players/{id} [put]&#10;func UpdatePlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;id := c.Params(&quot;id&quot;)&#10;&#9;&#9;var input models.Player&#10;&#9;&#9;if err := c.BodyParser(&amp;input); err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;updated, err := repo.UpdatePlayer(id, &amp;input)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.JSON(updated)&#10;&#9;}&#10;}&#10;&#10;// DeletePlayer godoc&#10;// @Summary Delete a player&#10;// @Description Delete a player by ID&#10;// @Tags players&#10;// @Param id path string true &quot;Player ID&quot;&#10;// @Success 204 {string} string &quot;No Content&quot;&#10;// @Failure 500 {object} map[string]string&#10;// @Router /players/{id} [delete]&#10;func DeletePlayer(repo repository.PlayerRepository) fiber.Handler {&#10;&#9;return func(c *fiber.Ctx) error {&#10;&#9;&#9;id := c.Params(&quot;id&quot;)&#10;&#9;&#9;err := repo.DeletePlayer(id)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;}&#10;&#9;&#9;return c.SendStatus(fiber.StatusNoContent)&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.go" />
              <option name="originalContent" value="package main&#10;&#10;import (&#10;&#9;&quot;contoso/dbsetup&quot;&#10;&#9;_ &quot;contoso/docs&quot; // swaggo docs&#10;&#9;&quot;contoso/elasticlog&quot;&#10;&#9;&quot;contoso/repository&quot;&#10;&#9;&quot;contoso/routes&quot;&#10;&#9;&quot;github.com/gofiber/fiber/v2&quot;&#10;&#9;logger2 &quot;github.com/gofiber/fiber/v2/middleware/logger&quot;&#10;&#9;&quot;github.com/swaggo/fiber-swagger&quot;&#10;&#9;&quot;os&quot;&#10;&#9;&quot;path/filepath&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;type elasticErrorWriter struct {&#10;&#9;logger *elasticlog.Logger&#10;}&#10;&#10;type elasticInfoWriter struct {&#10;&#9;logger *elasticlog.Logger&#10;}&#10;&#10;func (w *elasticErrorWriter) Write(p []byte) (n int, err error) {&#10;&#9;n, err = os.Stderr.Write(p)&#10;&#9;w.logger.Error(string(p), nil)&#10;&#9;return n, err&#10;}&#10;&#10;func (w *elasticInfoWriter) Write(p []byte) (n int, err error) {&#10;&#9;n, err = os.Stderr.Write(p)&#10;&#9;w.logger.Info(string(p), nil)&#10;&#9;return n, err&#10;}&#10;&#10;func startBackgroundService(logger *elasticlog.Logger) {&#10;&#9;go func() {&#10;&#9;&#9;for {&#10;&#9;&#9;&#9;logger.Info(&quot;Background service heartbeat&quot;, map[string]interface{}{&#10;&#9;&#9;&#9;&#9;&quot;event&quot;: &quot;heartbeat&quot;,&#10;&#9;&#9;&#9;&#9;&quot;time&quot;:  time.Now().Format(time.RFC3339),&#10;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;time.Sleep(1 * time.Minute)&#10;&#9;&#9;}&#10;&#9;}()&#10;}&#10;&#10;func main() {&#10;&#9;// Setup logger&#10;&#9;logLevel := elasticlog.ParseLogLevel(os.Getenv(&quot;LOG_LEVEL&quot;))&#10;&#9;logger := elasticlog.NewLogger(&#10;&#9;&#9;logLevel,&#10;&#9;&#9;&quot;contoso-&quot;, // index&#10;&#9;&#9;os.Getenv(&quot;ELASTICSEARCH_USERNAME&quot;),&#10;&#9;&#9;os.Getenv(&quot;ELASTICSEARCH_PASSWORD&quot;),&#10;&#9;)&#10;&#10;&#9;// Start background service&#10;&#9;startBackgroundService(logger)&#10;&#10;&#9;logger.Info(&quot;Contoso backend started&quot;, map[string]interface{}{&#10;&#9;&#9;&quot;event&quot;: &quot;startup&quot;,&#10;&#9;})&#10;&#10;&#9;// Choose repository based on environment variable&#10;&#9;var playerRepo repository.PlayerRepository&#10;&#9;dbType := os.Getenv(&quot;DB_TYPE&quot;)&#10;&#9;if dbType == &quot;postgres&quot; {&#10;&#9;&#9;playerRepo = repository.NewPostgresPlayerRepository(dbsetup.GetPostgresDB())&#10;&#9;&#9;logger.Info(&quot;Using Postgres repository&quot;, nil)&#10;&#9;} else {&#10;&#9;&#9;playerRepo = repository.NewMongoPlayerRepository(dbsetup.GetMongoCollection())&#10;&#9;&#9;logger.Info(&quot;Using MongoDB repository&quot;, nil)&#10;&#9;}&#10;&#10;&#9;app := fiber.New(fiber.Config{&#10;&#9;&#9;ErrorHandler: func(c *fiber.Ctx, err error) error {&#10;&#9;&#9;&#9;logger.Error(&quot;Fiber error&quot;, map[string]interface{}{&#10;&#9;&#9;&#9;&#9;&quot;error&quot;:  err.Error(),&#10;&#9;&#9;&#9;&#9;&quot;path&quot;:   c.Path(),&#10;&#9;&#9;&#9;&#9;&quot;method&quot;: c.Method(),&#10;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;},&#10;&#9;})&#10;&#10;&#9;// Add Fiber's logger middleware for endpoint and info logging, logging to both console and elastic&#10;&#9;app.Use(logger2.New(logger2.Config{&#10;&#9;&#9;Format:     &quot;[${time}] ${status} - ${latency} ${method} ${path}\n&quot;,&#10;&#9;&#9;TimeFormat: time.RFC3339,&#10;&#9;&#9;Output:     &amp;elasticInfoWriter{logger: logger}, // log to both console and elastic&#10;&#9;}))&#10;&#10;&#9;app.Use(func(c *fiber.Ctx) error {&#10;&#9;&#9;start := time.Now()&#10;&#9;&#9;err := c.Next()&#10;&#9;&#9;latency := time.Since(start)&#10;&#9;&#9;status := c.Response().StatusCode()&#10;&#9;&#9;entry := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;method&quot;:  c.Method(),&#10;&#9;&#9;&#9;&quot;path&quot;:    c.Path(),&#10;&#9;&#9;&#9;&quot;status&quot;:  status,&#10;&#9;&#9;&#9;&quot;latency&quot;: latency.String(),&#10;&#9;&#9;&#9;&quot;client&quot;:  c.IP(),&#10;&#9;&#9;}&#10;&#9;&#9;switch {&#10;&#9;&#9;case status &gt;= 500:&#10;&#9;&#9;&#9;logger.Error(&quot;HTTP request&quot;, entry)&#10;&#9;&#9;case status &gt;= 400:&#10;&#9;&#9;&#9;logger.Warn(&quot;HTTP request&quot;, entry)&#10;&#9;&#9;default:&#10;&#9;&#9;&#9;logger.Info(&quot;HTTP request&quot;, entry)&#10;&#9;&#9;}&#10;&#9;&#9;return err&#10;&#9;})&#10;&#10;&#9;// Pass the repository to the routes/controllers&#10;&#9;routes.RegisterRoutesFiber(app, playerRepo)&#10;&#10;&#9;// Serve static files for frontend&#10;&#9;publicDir := &quot;./public&quot;&#10;&#9;app.Static(&quot;/assets&quot;, filepath.Join(publicDir, &quot;assets&quot;))&#10;&#10;&#9;// Serve Swagger UI at /swagger/*&#10;&#9;app.Get(&quot;/swagger/*&quot;, fiberSwagger.WrapHandler)&#10;&#10;&#9;// Serve raw swagger.json for ReDoc and other tools&#10;&#9;app.Get(&quot;/swagger/doc.json&quot;, func(c *fiber.Ctx) error {&#10;&#9;&#9;return c.SendFile(filepath.Join(&quot;docs&quot;, &quot;swagger.json&quot;), true)&#10;&#9;})&#10;&#10;&#9;// Serve ReDoc at /redoc&#10;&#9;app.Get(&quot;/redoc&quot;, func(c *fiber.Ctx) error {&#10;&#9;&#9;html := `&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;  &lt;head&gt;&#10;    &lt;title&gt;ReDoc&lt;/title&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;/&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&#10;    &lt;link rel=&quot;icon&quot; href=&quot;data:,&quot;&gt;&#10;    &lt;style&gt;&#10;      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&amp;display=swap');&#10;      html, body, redoc, #redoc-container {&#10;        height: 100%;&#10;        width: 100%;&#10;        margin: 0;&#10;        padding: 0;&#10;        background: #181a1b !important;&#10;        color: #e0e0e0 !important;&#10;        font-family: 'Inter', 'Segoe UI', Arial, sans-serif;&#10;        -webkit-font-smoothing: antialiased;&#10;        -moz-osx-font-smoothing: grayscale;&#10;      }&#10;      /* Headings */&#10;      h1, h2, h3, h4, h5, h6 {&#10;        font-family: 'Inter', 'Segoe UI', Arial, sans-serif;&#10;        font-weight: 700;&#10;        color: #6ca0ff !important;&#10;        letter-spacing: -0.5px;&#10;        margin-bottom: 10px !important;&#10;        margin-top: 0 !important;&#10;        line-height: 1.1;&#10;      }&#10;      h1 { font-size: 2.5rem; }&#10;      h2 { font-size: 2rem; }&#10;      h3 { font-size: 1.5rem; }&#10;      h4 { font-size: 1.25rem; }&#10;      h5 { font-size: 1.1rem; }&#10;      h6 { font-size: 1rem; }&#10;      /* Tag cards */&#10;      [id^=&quot;tag/&quot;] {&#10;        background: #23272a !important;&#10;        border-radius: 12px;&#10;        box-shadow: 0 2px 8px 0 rgba(0,0,0,0.25);&#10;        margin-bottom: 32px !important;&#10;        padding: 24px 32px !important;&#10;        transition: box-shadow 0.2s;&#10;        color: #e0e0e0 !important;&#10;      }&#10;      [id^=&quot;tag/&quot;]:hover {&#10;        box-shadow: 0 4px 16px 0 rgba(0,0,0,0.35);&#10;      }&#10;      /* Links and buttons */&#10;      a, button {&#10;        color: #6ca0ff !important;&#10;        border-radius: 6px;&#10;        font-weight: 600;&#10;        text-decoration: none;&#10;        transition: background 0.2s, color 0.2s;&#10;      }&#10;      a:hover, button:hover {&#10;        background: #26324a !important;&#10;        color: #a3c9ff !important;&#10;      }&#10;      /* Code blocks */&#10;      code, pre {&#10;        background: #23272a !important;&#10;        color: #a3c9ff !important;&#10;        border-radius: 6px;&#10;        font-size: 0.97em;&#10;        padding: 2px 8px;&#10;      }&#10;      /* Section backgrounds */&#10;      .sc-eDvSVe, .sc-jrsJWt, .sc-hKwDye, .sc-cPiKLX, .menu-content {&#10;        background: #202225 !important;&#10;        color: #e0e0e0 !important;&#10;      }&#10;      /* Force dark theme for all menu/sidebar and ReDoc UI elements */&#10;      .menu-content, .sc-dkzDqf, .sc-hKwDye, .sc-cPiKLX, .sc-eDvSVe, .sc-jrsJWt, .sc-gEvEer, .sc-ksZaOG, .sc-hBUSln, .sc-bZQynM, .sc-lllmON, .sc-cmTdod, .sc-dcJsrY, .sc-hKwDye, .sc-cPiKLX, .sc-jrsJWt, .sc-fubCfw, .sc-kgflAQ, .sc-lllmON, .sc-cmTdod, .sc-dcJsrY {&#10;        background: #181a1b !important;&#10;        color: #e0e0e0 !important;&#10;        border-color: #23272a !important;&#10;      }&#10;      .menu-content *, .sc-dkzDqf *, .sc-hKwDye *, .sc-cPiKLX *, .sc-eDvSVe *, .sc-jrsJWt *, .sc-gEvEer *, .sc-ksZaOG *, .sc-hBUSln *, .sc-bZQynM *, .sc-lllmON *, .sc-cmTdod *, .sc-dcJsrY *, .sc-fubCfw *, .sc-kgflAQ * {&#10;        color: #e0e0e0 !important;&#10;        background: transparent !important;&#10;      }&#10;      .menu-content a, .menu-content a *, .sc-dkzDqf a, .sc-dkzDqf a *, .sc-hKwDye a, .sc-hKwDye a *, .sc-cPiKLX a, .sc-cPiKLX a * {&#10;        color: #6ca0ff !important;&#10;      }&#10;      .menu-content a:hover, .sc-dkzDqf a:hover, .sc-hKwDye a:hover, .sc-cPiKLX a:hover {&#10;        color: #a3c9ff !important;&#10;        background: #23272a !important;&#10;      }&#10;      /* Make menu SVG arrows lighter for dark theme */&#10;      .menu-content svg, .sc-cBoqAE svg, .sc-dkzDqf svg, .sc-hKwDye svg, .sc-cPiKLX svg, .sc-jrsJWt svg, .sc-eDvSVe svg {&#10;        fill: #b3cfff !important;&#10;        color: #b3cfff !important;&#10;        opacity: 1 !important;&#10;      }&#10;      /* Remove box-shadow from menu for a flat look */&#10;      .menu-content, .sc-dkzDqf {&#10;        box-shadow: none !important;&#10;      }&#10;      /* Fix search bar and input fields */&#10;      input, .sc-hKwDye input, .sc-cPiKLX input {&#10;        background: #23272a !important;&#10;        color: #e0e0e0 !important;&#10;        border: 1px solid #23272a !important;&#10;      }&#10;      input::placeholder {&#10;        color: #888 !important;&#10;      }&#10;      /* Fix scrollbar in menu */&#10;      .menu-content ::-webkit-scrollbar {&#10;        width: 8px;&#10;        background: #23272a;&#10;      }&#10;      .menu-content ::-webkit-scrollbar-thumb {&#10;        background: #181a1b;&#10;        border-radius: 4px;&#10;      }&#10;      /* Application/JSON dark theme fix, but keep response body (second part) light */&#10;      .sc-dkzDqf, .sc-eDvSVe, .sc-hKwDye, .sc-cPiKLX {&#10;        color: #e0e0e0 !important;&#10;        background: #23272a !important;&#10;      }&#10;      .sc-dkzDqf code, .sc-eDvSVe code, .sc-hKwDye code, .sc-cPiKLX code {&#10;        color: #a3c9ff !important;&#10;        background: #23272a !important;&#10;      }&#10;      .sc-dkzDqf pre, .sc-eDvSVe pre, .sc-hKwDye pre, .sc-cPiKLX pre {&#10;        color: #a3c9ff !important;&#10;        background: #23272a !important;&#10;      }&#10;      /* Keep the second part (response body) light */&#10;      .sc-ikZpkk, .sc-ikZpkk * {&#10;        background: #fff !important;&#10;        color: #23272a !important;&#10;      }&#10;      /* Make menu operation verbs colored and menu text lighter */&#10;      .sc-cBoqAE, .sc-cBoqAE * {&#10;        color: #f0f0f0 !important;&#10;      }&#10;      /* HTTP verb colors in menu */&#10;      .sc-cBoqAE span[title=&quot;get&quot;], .sc-cBoqAE .http-verb-get {&#10;        color: #61affe !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;post&quot;], .sc-cBoqAE .http-verb-post {&#10;        color: #49cc90 !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;put&quot;], .sc-cBoqAE .http-verb-put {&#10;        color: #fca130 !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;delete&quot;], .sc-cBoqAE .http-verb-delete {&#10;        color: #f93e3e !important;&#10;        background: none !important;&#10;      }&#10;      /* For PATCH and other verbs */&#10;      .sc-cBoqAE span[title=&quot;patch&quot;], .sc-cBoqAE .http-verb-patch {&#10;        color: #bada55 !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;options&quot;], .sc-cBoqAE .http-verb-options {&#10;        color: #ebebeb !important;&#10;        background: none !important;&#10;      }&#10;      /* HTTP verb colors for operation-type classes in menu and content */&#10;      .operation-type.get, .sc-ikXwFM.get {&#10;        color: #61affe !important;&#10;      }&#10;      .operation-type.post, .sc-ikXwFM.post {&#10;        color: #49cc90 !important;&#10;      }&#10;      .operation-type.put, .sc-ikXwFM.put {&#10;        color: #fca130 !important;&#10;      }&#10;      .operation-type.delete, .sc-ikXwFM.delete {&#10;        color: #f93e3e !important;&#10;      }&#10;      .operation-type.patch, .sc-ikXwFM.patch {&#10;        color: #bada55 !important;&#10;      }&#10;      .operation-type.options, .sc-ikXwFM.options {&#10;        color: #ebebeb !important;&#10;      }&#10;      /* Highlight selected menu item */&#10;      .sc-cBoqAE .sc-hSdWYo.selected, .sc-cBoqAE .sc-hSdWYo.selected *,&#10;      .sc-cBoqAE .sc-hSdWYo.active, .sc-cBoqAE .sc-hSdWYo.active * {&#10;        background: #23272a !important;&#10;        color: #6ca0ff !important;&#10;        border-radius: 6px;&#10;        font-weight: 700;&#10;        box-shadow: 0 0 0 2px #6ca0ff33;&#10;        transition: background 0.2s, color 0.2s;&#10;      }&#10;      /* Also highlight operation-type in menu if selected */&#10;      .sc-cBoqAE .sc-hSdWYo.selected .operation-type,&#10;      .sc-cBoqAE .sc-hSdWYo.active .operation-type {&#10;        color: #fff !important;&#10;        background: #6ca0ff !important;&#10;        border-radius: 4px;&#10;        padding: 2px 8px;&#10;      }&#10;      @media (max-width: 900px) {&#10;        [id^=&quot;tag/&quot;] {&#10;          padding: 12px 8px !important;&#10;        }&#10;        h1 { font-size: 2rem; }&#10;        h2 { font-size: 1.5rem; }&#10;        h3 { font-size: 1.2rem; }&#10;      }&#10;    &lt;/style&gt;&#10;  &lt;/head&gt;&#10;  &lt;body&gt;&#10;    &lt;redoc spec-url='/swagger/doc.json'&gt;&lt;/redoc&gt;&#10;    &lt;script src='https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js'&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;`&#10;&#9;&#9;return c.Type(&quot;html&quot;).SendString(html)&#10;&#9;})&#10;&#10;&#9;// Serve index.html for non-API routes (SPA fallback)&#10;&#9;app.Use(func(c *fiber.Ctx) error {&#10;&#9;&#9;if len(c.Path()) &gt;= 4 &amp;&amp; c.Path()[:4] == &quot;/api&quot; {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusNotFound).JSON(fiber.Map{&quot;error&quot;: &quot;Not found&quot;})&#10;&#9;&#9;}&#10;&#9;&#9;return c.SendFile(filepath.Join(publicDir, &quot;index.html&quot;))&#10;&#9;})&#10;&#10;&#9;err := app.Listen(&quot;:8080&quot;)&#10;&#9;if err != nil {&#10;&#9;&#9;logger.Error(&quot;Failed to start server&quot;, map[string]interface{}{&quot;error&quot;: err.Error()})&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package main&#10;&#10;import (&#10;&#9;&quot;contoso/dbsetup&quot;&#10;&#9;_ &quot;contoso/docs&quot; // swaggo docs&#10;&#9;&quot;contoso/elasticlog&quot;&#10;&#9;&quot;contoso/repository&quot;&#10;&#9;&quot;contoso/routes&quot;&#10;&#9;&quot;github.com/gofiber/fiber/v2&quot;&#10;&#9;logger2 &quot;github.com/gofiber/fiber/v2/middleware/logger&quot;&#10;&#9;&quot;github.com/swaggo/fiber-swagger&quot;&#10;&#9;&quot;os&quot;&#10;&#9;&quot;path/filepath&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;type elasticErrorWriter struct {&#10;&#9;logger *elasticlog.Logger&#10;}&#10;&#10;type elasticInfoWriter struct {&#10;&#9;logger *elasticlog.Logger&#10;}&#10;&#10;func (w *elasticErrorWriter) Write(p []byte) (n int, err error) {&#10;&#9;n, err = os.Stderr.Write(p)&#10;&#9;w.logger.Error(string(p), nil)&#10;&#9;return n, err&#10;}&#10;&#10;func (w *elasticInfoWriter) Write(p []byte) (n int, err error) {&#10;&#9;n, err = os.Stderr.Write(p)&#10;&#9;w.logger.Info(string(p), nil)&#10;&#9;return n, err&#10;}&#10;&#10;func startBackgroundService(logger *elasticlog.Logger) {&#10;&#9;go func() {&#10;&#9;&#9;for {&#10;&#9;&#9;&#9;logger.Info(&quot;Background service heartbeat&quot;, map[string]interface{}{&#10;&#9;&#9;&#9;&#9;&quot;event&quot;: &quot;heartbeat&quot;,&#10;&#9;&#9;&#9;&#9;&quot;time&quot;:  time.Now().Format(time.RFC3339),&#10;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;time.Sleep(1 * time.Minute)&#10;&#9;&#9;}&#10;&#9;}()&#10;}&#10;&#10;func main() {&#10;&#9;// Setup logger&#10;&#9;logLevel := elasticlog.ParseLogLevel(os.Getenv(&quot;LOG_LEVEL&quot;))&#10;&#9;logger := elasticlog.NewLogger(&#10;&#9;&#9;logLevel,&#10;&#9;&#9;&quot;contoso-&quot;, // index&#10;&#9;&#9;os.Getenv(&quot;ELASTICSEARCH_USERNAME&quot;),&#10;&#9;&#9;os.Getenv(&quot;ELASTICSEARCH_PASSWORD&quot;),&#10;&#9;)&#10;&#10;&#9;// Start background service&#10;&#9;startBackgroundService(logger)&#10;&#10;&#9;logger.Info(&quot;Contoso backend started&quot;, map[string]interface{}{&#10;&#9;&#9;&quot;event&quot;: &quot;startup&quot;,&#10;&#9;})&#10;&#10;&#9;// Choose repository based on environment variable&#10;&#9;var playerRepo repository.PlayerRepository&#10;&#9;dbType := os.Getenv(&quot;DB_TYPE&quot;)&#10;&#9;if dbType == &quot;postgres&quot; {&#10;&#9;&#9;playerRepo = repository.NewPostgresPlayerRepository(dbsetup.GetPostgresDB())&#10;&#9;&#9;logger.Info(&quot;Using Postgres repository&quot;, nil)&#10;&#9;} else {&#10;&#9;&#9;playerRepo = repository.NewMongoPlayerRepository(dbsetup.GetMongoCollection())&#10;&#9;&#9;logger.Info(&quot;Using MongoDB repository&quot;, nil)&#10;&#9;}&#10;&#10;&#9;app := fiber.New(fiber.Config{&#10;&#9;&#9;ErrorHandler: func(c *fiber.Ctx, err error) error {&#10;&#9;&#9;&#9;logger.Error(&quot;Fiber error&quot;, map[string]interface{}{&#10;&#9;&#9;&#9;&#9;&quot;error&quot;:  err.Error(),&#10;&#9;&#9;&#9;&#9;&quot;path&quot;:   c.Path(),&#10;&#9;&#9;&#9;&#9;&quot;method&quot;: c.Method(),&#10;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{&quot;error&quot;: err.Error()})&#10;&#9;&#9;},&#10;&#9;})&#10;&#10;&#9;// Add Fiber's logger middleware for endpoint and info logging, logging to both console and elastic&#10;&#9;app.Use(logger2.New(logger2.Config{&#10;&#9;&#9;Format:     &quot;[${time}] ${status} - ${latency} ${method} ${path}\n&quot;,&#10;&#9;&#9;TimeFormat: time.RFC3339,&#10;&#9;&#9;Output:     &amp;elasticInfoWriter{logger: logger}, // log to both console and elastic&#10;&#9;}))&#10;&#10;&#9;app.Use(func(c *fiber.Ctx) error {&#10;&#9;&#9;start := time.Now()&#10;&#9;&#9;err := c.Next()&#10;&#9;&#9;latency := time.Since(start)&#10;&#9;&#9;status := c.Response().StatusCode()&#10;&#9;&#9;entry := map[string]interface{}{&#10;&#9;&#9;&#9;&quot;method&quot;:  c.Method(),&#10;&#9;&#9;&#9;&quot;path&quot;:    c.Path(),&#10;&#9;&#9;&#9;&quot;status&quot;:  status,&#10;&#9;&#9;&#9;&quot;latency&quot;: latency.String(),&#10;&#9;&#9;&#9;&quot;client&quot;:  c.IP(),&#10;&#9;&#9;}&#10;&#9;&#9;switch {&#10;&#9;&#9;case status &gt;= 500:&#10;&#9;&#9;&#9;logger.Error(&quot;HTTP request&quot;, entry)&#10;&#9;&#9;case status &gt;= 400:&#10;&#9;&#9;&#9;logger.Warn(&quot;HTTP request&quot;, entry)&#10;&#9;&#9;default:&#10;&#9;&#9;&#9;logger.Info(&quot;HTTP request&quot;, entry)&#10;&#9;&#9;}&#10;&#9;&#9;return err&#10;&#9;})&#10;&#10;&#9;// Pass the repository to the routes/controllers&#10;&#9;routes.RegisterRoutesFiber(app, playerRepo)&#10;&#10;&#9;// Serve static files for frontend&#10;&#9;publicDir := &quot;./public&quot;&#10;&#9;app.Static(&quot;/assets&quot;, filepath.Join(publicDir, &quot;assets&quot;))&#10;&#10;&#9;// Serve Swagger UI at /swagger/*&#10;&#9;app.Get(&quot;/swagger/*&quot;, fiberSwagger.WrapHandler)&#10;&#10;&#9;// Serve raw swagger.json for ReDoc and other tools&#10;&#9;app.Get(&quot;/swagger/doc.json&quot;, func(c *fiber.Ctx) error {&#10;&#9;&#9;return c.SendFile(filepath.Join(&quot;docs&quot;, &quot;swagger.json&quot;), true)&#10;&#9;})&#10;&#10;&#9;// Serve ReDoc at /redoc&#10;&#9;app.Get(&quot;/redoc&quot;, func(c *fiber.Ctx) error {&#10;&#9;&#9;html := `&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;  &lt;head&gt;&#10;    &lt;title&gt;ReDoc&lt;/title&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;/&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&#10;    &lt;link rel=&quot;icon&quot; href=&quot;data:,&quot;&gt;&#10;    &lt;style&gt;&#10;      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&amp;display=swap');&#10;      html, body, redoc, #redoc-container {&#10;        height: 100%;&#10;        width: 100%;&#10;        margin: 0;&#10;        padding: 0;&#10;        background: #181a1b !important;&#10;        color: #e0e0e0 !important;&#10;        font-family: 'Inter', 'Segoe UI', Arial, sans-serif;&#10;        -webkit-font-smoothing: antialiased;&#10;        -moz-osx-font-smoothing: grayscale;&#10;      }&#10;      /* Headings */&#10;      h1, h2, h3, h4, h5, h6 {&#10;        font-family: 'Inter', 'Segoe UI', Arial, sans-serif;&#10;        font-weight: 700;&#10;        color: #6ca0ff !important;&#10;      }&#10;      /* Make SVG .sc class font and fill white */&#10;      svg .sc {&#10;        color: #fff !important;&#10;        fill: #fff !important;&#10;      }&#10;      /* Tag cards */&#10;      [id^=&quot;tag/&quot;] {&#10;        background: #23272a !important;&#10;        border-radius: 12px;&#10;        box-shadow: 0 2px 8px 0 rgba(0,0,0,0.25);&#10;        margin-bottom: 32px !important;&#10;        padding: 24px 32px !important;&#10;        transition: box-shadow 0.2s;&#10;        color: #e0e0e0 !important;&#10;      }&#10;      [id^=&quot;tag/&quot;]:hover {&#10;        box-shadow: 0 4px 16px 0 rgba(0,0,0,0.35);&#10;      }&#10;      /* Links and buttons */&#10;      a, button {&#10;        color: #6ca0ff !important;&#10;        border-radius: 6px;&#10;        font-weight: 600;&#10;        text-decoration: none;&#10;        transition: background 0.2s, color 0.2s;&#10;      }&#10;      a:hover, button:hover {&#10;        background: #26324a !important;&#10;        color: #a3c9ff !important;&#10;      }&#10;      /* Code blocks */&#10;      code, pre {&#10;        background: #23272a !important;&#10;        color: #a3c9ff !important;&#10;        border-radius: 6px;&#10;        font-size: 0.97em;&#10;        padding: 2px 8px;&#10;      }&#10;      /* Section backgrounds */&#10;      .sc-eDvSVe, .sc-jrsJWt, .sc-hKwDye, .sc-cPiKLX, .menu-content {&#10;        background: #202225 !important;&#10;        color: #e0e0e0 !important;&#10;      }&#10;      /* Force dark theme for all menu/sidebar and ReDoc UI elements */&#10;      .menu-content, .sc-dkzDqf, .sc-hKwDye, .sc-cPiKLX, .sc-eDvSVe, .sc-jrsJWt, .sc-gEvEer, .sc-ksZaOG, .sc-hBUSln, .sc-bZQynM, .sc-lllmON, .sc-cmTdod, .sc-dcJsrY, .sc-hKwDye, .sc-cPiKLX, .sc-jrsJWt, .sc-fubCfw, .sc-kgflAQ, .sc-lllmON, .sc-cmTdod, .sc-dcJsrY {&#10;        background: #181a1b !important;&#10;        color: #e0e0e0 !important;&#10;        border-color: #23272a !important;&#10;      }&#10;      .menu-content *, .sc-dkzDqf *, .sc-hKwDye *, .sc-cPiKLX *, .sc-eDvSVe *, .sc-jrsJWt *, .sc-gEvEer *, .sc-ksZaOG *, .sc-hBUSln *, .sc-bZQynM *, .sc-lllmON *, .sc-cmTdod *, .sc-dcJsrY *, .sc-fubCfw *, .sc-kgflAQ * {&#10;        color: #e0e0e0 !important;&#10;        background: transparent !important;&#10;      }&#10;      .menu-content a, .menu-content a *, .sc-dkzDqf a, .sc-dkzDqf a *, .sc-hKwDye a, .sc-hKwDye a *, .sc-cPiKLX a, .sc-cPiKLX a * {&#10;        color: #6ca0ff !important;&#10;      }&#10;      .menu-content a:hover, .sc-dkzDqf a:hover, .sc-hKwDye a:hover, .sc-cPiKLX a:hover {&#10;        color: #a3c9ff !important;&#10;        background: #23272a !important;&#10;      }&#10;      /* Make menu SVG arrows lighter for dark theme */&#10;      .menu-content svg, .sc-cBoqAE svg, .sc-dkzDqf svg, .sc-hKwDye svg, .sc-cPiKLX svg, .sc-jrsJWt svg, .sc-eDvSVe svg {&#10;        fill: #b3cfff !important;&#10;        color: #b3cfff !important;&#10;        opacity: 1 !important;&#10;      }&#10;      /* Remove box-shadow from menu for a flat look */&#10;      .menu-content, .sc-dkzDqf {&#10;        box-shadow: none !important;&#10;      }&#10;      /* Fix search bar and input fields */&#10;      input, .sc-hKwDye input, .sc-cPiKLX input {&#10;        background: #23272a !important;&#10;        color: #e0e0e0 !important;&#10;        border: 1px solid #23272a !important;&#10;      }&#10;      input::placeholder {&#10;        color: #888 !important;&#10;      }&#10;      /* Fix scrollbar in menu */&#10;      .menu-content ::-webkit-scrollbar {&#10;        width: 8px;&#10;        background: #23272a;&#10;      }&#10;      .menu-content ::-webkit-scrollbar-thumb {&#10;        background: #181a1b;&#10;        border-radius: 4px;&#10;      }&#10;      /* Application/JSON dark theme fix, but keep response body (second part) light */&#10;      .sc-dkzDqf, .sc-eDvSVe, .sc-hKwDye, .sc-cPiKLX {&#10;        color: #e0e0e0 !important;&#10;        background: #23272a !important;&#10;      }&#10;      .sc-dkzDqf code, .sc-eDvSVe code, .sc-hKwDye code, .sc-cPiKLX code {&#10;        color: #a3c9ff !important;&#10;        background: #23272a !important;&#10;      }&#10;      .sc-dkzDqf pre, .sc-eDvSVe pre, .sc-hKwDye pre, .sc-cPiKLX pre {&#10;        color: #a3c9ff !important;&#10;        background: #23272a !important;&#10;      }&#10;      /* Keep the second part (response body) light */&#10;      .sc-ikZpkk, .sc-ikZpkk * {&#10;        background: #fff !important;&#10;        color: #23272a !important;&#10;      }&#10;      /* Make menu operation verbs colored and menu text lighter */&#10;      .sc-cBoqAE, .sc-cBoqAE * {&#10;        color: #f0f0f0 !important;&#10;      }&#10;      /* HTTP verb colors in menu */&#10;      .sc-cBoqAE span[title=&quot;get&quot;], .sc-cBoqAE .http-verb-get {&#10;        color: #61affe !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;post&quot;], .sc-cBoqAE .http-verb-post {&#10;        color: #49cc90 !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;put&quot;], .sc-cBoqAE .http-verb-put {&#10;        color: #fca130 !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;delete&quot;], .sc-cBoqAE .http-verb-delete {&#10;        color: #f93e3e !important;&#10;        background: none !important;&#10;      }&#10;      /* For PATCH and other verbs */&#10;      .sc-cBoqAE span[title=&quot;patch&quot;], .sc-cBoqAE .http-verb-patch {&#10;        color: #bada55 !important;&#10;        background: none !important;&#10;      }&#10;      .sc-cBoqAE span[title=&quot;options&quot;], .sc-cBoqAE .http-verb-options {&#10;        color: #ebebeb !important;&#10;        background: none !important;&#10;      }&#10;      /* HTTP verb colors for operation-type classes in menu and content */&#10;      .operation-type.get, .sc-ikXwFM.get {&#10;        color: #61affe !important;&#10;      }&#10;      .operation-type.post, .sc-ikXwFM.post {&#10;        color: #49cc90 !important;&#10;      }&#10;      .operation-type.put, .sc-ikXwFM.put {&#10;        color: #fca130 !important;&#10;      }&#10;      .operation-type.delete, .sc-ikXwFM.delete {&#10;        color: #f93e3e !important;&#10;      }&#10;      .operation-type.patch, .sc-ikXwFM.patch {&#10;        color: #bada55 !important;&#10;      }&#10;      .operation-type.options, .sc-ikXwFM.options {&#10;        color: #ebebeb !important;&#10;      }&#10;      /* Highlight selected menu item */&#10;      .sc-cBoqAE .sc-hSdWYo.selected, .sc-cBoqAE .sc-hSdWYo.selected *,&#10;      .sc-cBoqAE .sc-hSdWYo.active, .sc-cBoqAE .sc-hSdWYo.active * {&#10;        background: #23272a !important;&#10;        color: #6ca0ff !important;&#10;        border-radius: 6px;&#10;        font-weight: 700;&#10;        box-shadow: 0 0 0 2px #6ca0ff33;&#10;        transition: background 0.2s, color 0.2s;&#10;      }&#10;      /* Also highlight operation-type in menu if selected */&#10;      .sc-cBoqAE .sc-hSdWYo.selected .operation-type,&#10;      .sc-cBoqAE .sc-hSdWYo.active .operation-type {&#10;        color: #fff !important;&#10;        background: #6ca0ff !important;&#10;        border-radius: 4px;&#10;        padding: 2px 8px;&#10;      }&#10;      @media (max-width: 900px) {&#10;        [id^=&quot;tag/&quot;] {&#10;          padding: 12px 8px !important;&#10;        }&#10;        h1 { font-size: 2rem; }&#10;        h2 { font-size: 1.5rem; }&#10;        h3 { font-size: 1.2rem; }&#10;      }&#10;    &lt;/style&gt;&#10;  &lt;/head&gt;&#10;  &lt;body&gt;&#10;    &lt;redoc spec-url='/swagger/doc.json'&gt;&lt;/redoc&gt;&#10;    &lt;script src='https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js'&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;`&#10;&#9;&#9;return c.Type(&quot;html&quot;).SendString(html)&#10;&#9;})&#10;&#10;&#9;// Serve index.html for non-API routes (SPA fallback)&#10;&#9;app.Use(func(c *fiber.Ctx) error {&#10;&#9;&#9;if len(c.Path()) &gt;= 4 &amp;&amp; c.Path()[:4] == &quot;/api&quot; {&#10;&#9;&#9;&#9;return c.Status(fiber.StatusNotFound).JSON(fiber.Map{&quot;error&quot;: &quot;Not found&quot;})&#10;&#9;&#9;}&#10;&#9;&#9;return c.SendFile(filepath.Join(publicDir, &quot;index.html&quot;))&#10;&#9;})&#10;&#10;&#9;err := app.Listen(&quot;:8080&quot;)&#10;&#9;if err != nil {&#10;&#9;&#9;logger.Error(&quot;Failed to start server&quot;, map[string]interface{}{&quot;error&quot;: err.Error()})&#10;&#9;}&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>